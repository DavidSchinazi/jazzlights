[platformio]
# These default envs are run by GitHub automation on all commits.
default_envs =
  vest
  vest_dev
  vest_instrumentation
  gauntlet
  native

# Settings shared by all platforms.
[env]
test_build_src = true

# Shared production build parameters for arduino. Will not build on its own.
[env:_arduino]
framework = arduino
upload_speed = 115200
monitor_speed = 115200
debug_tool = olimex-arm-usb-ocd-h
# Unfortunately upload_port and monitor_port don't natively support regexes, but hwgrep does.
# For some reason the characters '*', '?', '[', and ']' don't work in hwgrep, so we improvised.
# macOS uses /dev/cu.usbserial-.+, Linux uses /dev/ttyUSB.+ and Windows uses COM.+
upload_port = hwgrep://^(/dev/cu\.usbserial-.+|/dev/ttyUSB.+|COM.+)$
monitor_port = ${this.upload_port}
lib_deps =
  fastled/FastLED

# Shared production build parameters for various m5stack boards. Will not build on its own.
[env:_atom]
extends = env:_arduino
platform = espressif32
board = m5stack-atom
upload_speed = 1500000
monitor_filters = esp32_exception_decoder, time
upload_port = hwgrep://^(/dev/cu\.usbserial-.{10}|/dev/ttyUSB.+|COM.+)$
monitor_port = ${this.upload_port}
# Increase available flash size from 1.25MB to 3MB
# by disabling Over The Air install option.
board_build.partitions = atom_matrix_partition_table.csv

# ATOM Matrix production build parameters. Will not build on its own.
[env:_atom_matrix]
extends = env:_atom
build_flags =
  ${env:_atom.build_flags}
  -DJL_CONTROLLER=ATOM_MATRIX

# ATOM Matrix production vest build.
[env:vest]
extends = env:_atom_matrix
build_flags =
  ${env:_atom_matrix.build_flags}
  -DJL_CONFIG=VEST
  -DBOOT_NAME=VEST

# ATOM Matrix build designed to boot into the calibration mode suitable for assembling vests.
[env:vest_calibrate]
extends = env:_atom_matrix
build_flags =
  ${env:_atom_matrix.build_flags}
  -DJL_CONFIG=VEST
  -DBOOT_NAME=FAB
  -DJL_START_SPECIAL=1
  -DJL_BUTTON_LOCK=0

# ATOM Matrix development vest build.
# Uses lower LED brightness to not overload computer USB, and disables button lock.
[env:vest_dev]
extends = env:_atom_matrix
build_flags =
  ${env:_atom_matrix.build_flags}
  -DJL_CONFIG=VEST
  -DBOOT_NAME=DEV
  -DJL_DEV=1

# ATOM Matrix debug vest build for stepping though code.
[env:vest_debug]
extends = env:vest_dev
build_type = debug
build_flags =
  ${env:vest_dev.build_flags}
  '-UBOOT_NAME -DBOOT_NAME=DEBUG'

# ATOM Matrix development vest build that saves and logs timing information about the arduino loop.
[env:vest_timing]
extends = env:vest_dev
build_flags =
  ${env:vest_dev.build_flags}
  '-UBOOT_NAME -DBOOT_NAME=TIMING'
  -DJL_TIMING=1

# ATOM Matrix development vest build with custom FreeRTOS settings to enable instrumentation.
# This requires additional installation steps, see the Instrumentation section of DEBUGGING.md.
[env:vest_instrumentation]
extends = env:vest_timing
framework = espidf, arduino
build_flags =
  ${env:vest_timing.build_flags}
  '-UBOOT_NAME -DBOOT_NAME=INSTRUMENT'
  -DJL_INSTRUMENTATION=1

# ATOM Matrix development vest build with Ethernet support.
[env:vest_ethernet]
extends = env:vest_dev
lib_deps =
  ${env:vest_dev.lib_deps}
  arduino-libraries/Ethernet
build_flags =
  ${env:vest_dev.build_flags}
  '-UBOOT_NAME -DBOOT_NAME=ETHD'
  -DJL_ARDUINO_ETHERNET=1

# ATOM Matrix production staff build.
[env:staff]
extends = env:_atom_matrix
build_flags =
  ${env:_atom_matrix.build_flags}
  -DJL_CONFIG=STAFF
  -DBOOT_NAME=STAFF

# ATOM Matrix production captain hat build.
[env:captain_hat]
extends = env:_atom_matrix
build_flags =
  ${env:_atom_matrix.build_flags}
  -DJL_CONFIG=CAPTAIN_HAT
  -DBOOT_NAME=CPT-HAT

# ATOM Matrix production rope light build.
[env:ropelight]
extends = env:_atom_matrix
build_flags =
  ${env:_atom_matrix.build_flags}
  -DJL_CONFIG=ROPELIGHT
  -DBOOT_NAME=ROPE

# ATOM Matrix production hammer build.
[env:hammer]
extends = env:_atom_matrix
build_flags =
  ${env:_atom_matrix.build_flags}
  -DJL_CONFIG=HAMMER
  -DBOOT_NAME=HAMMER

# ATOM Matrix production fairy wand build.
[env:fairy_wand]
extends = env:_atom_matrix
build_flags =
  ${env:_atom_matrix.build_flags}
  -DJL_CONFIG=FAIRY_WAND
  -DBOOT_NAME=WAND

# ATOM Matrix production clouds build.
[env:clouds]
extends = env:_atom_matrix
build_flags =
  ${env:_atom_matrix.build_flags}
  -DJL_CONFIG=CLOUDS
  -DBOOT_NAME=CLOUDS

# ATOM Lite production build parameters. Will not build on its own.
[env:_atom_lite]
extends = env:_atom
build_flags =
  ${env:_atom.build_flags}
  -DJL_CONTROLLER=ATOM_LITE

# ATOM Matrix production fairy wand build.
[env:vest_lite]
extends = env:_atom_lite
build_flags =
  ${env:_atom_lite.build_flags}
  -DJL_CONFIG=VEST
  -DBOOT_NAME=VEST-LITE

# ATOM S3 production build parameters. Will not build on its own.
[env:_atom_s3]
extends = env:_arduino
platform = espressif32
board = m5stack-atoms3
upload_speed = 1500000
monitor_filters = esp32_exception_decoder, time
upload_port = hwgrep://^/dev/cu\.(usb|)modem\d{3,4}$
monitor_port = ${this.upload_port}
build_flags =
  ${env:_arduino.build_flags}
  -DJL_CONTROLLER=ATOM_S3
  -DARDUINO_USB_MODE=1
  -DARDUINO_USB_CDC_ON_BOOT=1
lib_deps =
  ${env:_arduino.lib_deps}
  m5stack/M5Unified

# ATOM S3 production vest build.
[env:vest_s3]
extends = env:_atom_s3
build_flags =
  ${env:_atom_s3.build_flags}
  -DJL_CONFIG=VEST
  -DBOOT_NAME=VEST-S3

# ATOM S3 development vest build.
# Uses lower LED brightness to not overload computer USB, and disables button lock.
[env:vest_s3_dev]
extends = env:_atom_s3
build_flags =
  ${env:_atom_s3.build_flags}
  -DJL_CONFIG=VEST
  -DBOOT_NAME=DEV-S3
  -DJL_DEV=1

# ATOM Matrix debug vest build for stepping though code.
[env:vest_s3_debug]
extends = env:vest_s3_dev
build_type = debug
build_flags =
  ${env:vest_s3_dev.build_flags}
  '-UBOOT_NAME -DBOOT_NAME=DEBUG-S3'
  -DCORE_DEBUG_LEVEL=5

# Core2AWS production build parameters. Will not build on its own.
[env:_core2aws]
extends = env:_arduino
platform = espressif32
board = m5stack-core2
monitor_filters = esp32_exception_decoder, time
upload_speed = 1500000
upload_port = hwgrep://^(/dev/cu\.usbserial-.{8}|/dev/ttyUSB.+|COM.+)$
monitor_port = ${this.upload_port}
# Increase available flash size by disabling Over The Air install option.
board_build.partitions = huge_app.csv
build_flags =
  ${env:_arduino.build_flags}
  -DJL_CONTROLLER=CORE2AWS
lib_deps =
  ${env:_arduino.lib_deps}
  m5stack/M5Core2

# Core2AWS production gauntlet build.
[env:gauntlet]
extends = env:_core2aws
build_flags =
  ${env:_core2aws.build_flags}
  -DJL_CONFIG=GAUNTLET
  -DBOOT_NAME=GAUNTLET

# Main Core2AWS development build for gauntlet.
# Uses lower LED brightness to not overload computer USB, disables button lock.
[env:gauntlet_dev]
extends = env:_core2aws
build_flags =
  ${env:_core2aws.build_flags}
  -DJL_CONFIG=GAUNTLET
  -DBOOT_NAME=GNTLT-DEV
  -DJL_DEV=1

# M5Stamp Pico production vest build.
# This requires using the M5Stack USB ESP32 Downloader Kit
# https://docs.m5stack.com/en/accessory/esp32_downloader_kit
# You also need to install the drivers that match the driver chip (CP2104 or CH9102).
[env:m5stamp_pico]
extends = env:_arduino
platform = espressif32
board = m5stamp-pico
upload_port = hwgrep://^/dev/cu\.wchusbserial\d{11}$
monitor_port = ${this.upload_port}
# Increase available flash size from 1.25MB to 3MB
# by disabling Over The Air install option.
board_build.partitions = atom_matrix_partition_table.csv
build_flags =
  ${env:_arduino.build_flags}
  -DJL_CONFIG=VEST
  -DBOOT_NAME=PICO
  -DJL_CONTROLLER=M5STAMP_PICO

# M5Stamp C3U production vest build.
[env:m5stamp_c3u]
extends = env:_arduino
platform = espressif32
board = adafruit_qtpy_esp32c3
upload_port = hwgrep://^/dev/cu\.(usb|)modem\d{3,7}$
monitor_port = ${this.upload_port}
# Increase available flash size from 1.25MB to 3MB
# by disabling Over The Air install option.
board_build.partitions = atom_matrix_partition_table.csv
build_flags =
  ${env:_arduino.build_flags}
  -DJL_CONFIG=VEST
  -DBOOT_NAME=C3U
  -DJL_CONTROLLER=M5STAMP_C3U

# Custom configs for multi-device testing.
[env:ds33_dev_a]
extends = env:vest_dev
upload_port = /dev/cu.usbserial-755264D6FA
monitor_port = ${this.upload_port}

[env:ds33_dev_b]
extends = env:vest_dev
upload_port = /dev/cu.usbserial-2D526B01AC
monitor_port = ${this.upload_port}

# Config for running on the host OS that runs PlatformIO.
[env:native]
platform = native
build_flags =
  -std=c++20
  -DJL_CONFIG=NONE
  -DJL_CONTROLLER=NATIVE
