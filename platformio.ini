[platformio]
# These default envs are run by GitHub automation on all commits.
default_envs =
  atom_matrix
  atom_matrix_dev
  atom_matrix_instrumentation
  core2aws
  native

[env]
framework = arduino
upload_speed = 115200
monitor_speed = 115200
debug_tool = olimex-arm-usb-ocd-h
# Unfortunately upload_port and monitor_port don't natively support regexes, but hwgrep does.
# For some reason the characters '*', '?', '[', and ']' don't work in hwgrep, so we improvised.
# macOS uses /dev/cu.usbserial-.+, Linux uses /dev/ttyUSB.+ and Windows uses COM.+
upload_port = hwgrep://^(/dev/cu\.usbserial-.+|/dev/ttyUSB.+|COM.+)$
monitor_port = ${this.upload_port}
lib_deps =
  fastled/FastLED
build_flags =
  -DMAX_MILLIWATTS=9200  # Default power limit for USB-powered devices is 9W
# Power levels used for MAX_MILLIWATTS are approximate.
# The FastLED power calculation algorithm is not entirely accurate,
# and probably not calibrated for the LED strips we use.

# Main ATOM Matrix production build.
[env:atom_matrix]
platform = espressif32
board = pico32
upload_speed = 1500000
monitor_filters = esp32_exception_decoder, time
upload_port = hwgrep://^(/dev/cu\.usbserial-.{10}|/dev/ttyUSB.+|COM.+)$
monitor_port = ${this.upload_port}
# Increase available flash size from 1.25MB to 3MB
# by disabling Over The Air install option.
board_build.partitions = atom_matrix_partition_table.csv
build_flags =
  ${env.build_flags}
  -DBOOT_NAME=VEST
  -DJL_CONFIG=VEST
  -DJL_CONTROLLER=ATOM_MATRIX

# ATOM Matrix build designed to boot into the calibration mode suitable for building vests.
[env:atom_matrix_calibrate]
extends = env:atom_matrix
build_flags =
  ${env:atom_matrix.build_flags}
  -DSTART_SPECIAL=1
  -DJL_BUTTON_LOCK=0
  '-UBOOT_NAME -DBOOT_NAME=FAB'

# Main ATOM Matrix development build
# Uses lower LED brightness to not overload computer USB.
# Disables button lock.
[env:atom_matrix_dev]
# Power limit of 4200 mW for the LEDs
# (plus about another 300 mW for the M5Stack ATOM Matrix ESP32 and its display)
# empirically determined not to overload the USB port on a laptop computer during development
extends = env:atom_matrix
build_flags =
  ${env:atom_matrix.build_flags}
  -DJL_DEV=1
  '-UMAX_MILLIWATTS -DMAX_MILLIWATTS=4200'  # Reduce power limit to 4W for host-connected development boards
  '-UBOOT_NAME -DBOOT_NAME=DEV'

# ATOM Matrix debug build for stepping though code.
[env:atom_matrix_debug]
extends = env:atom_matrix_dev
build_type = debug
build_flags =
  ${env:atom_matrix_dev.build_flags}
  '-UBOOT_NAME -DBOOT_NAME=DEBUG'

# ATOM Matrix build that saves and logs timing information about the arduino loop.
[env:atom_matrix_timing]
extends = env:atom_matrix_dev
build_flags =
  ${env:atom_matrix_dev.build_flags}
  '-UBOOT_NAME -DBOOT_NAME=TIMING'
  -DJL_TIMING=1

# ATOM Matrix build with custom FreeRTOS settings to enable instrumentation.
# This uses our local sdkconfig instead of the default Arduino one here:
# https://github.com/espressif/arduino-esp32/blob/master/tools/sdk/esp32/sdkconfig
[env:atom_matrix_instrumentation]
extends = env:atom_matrix_timing
framework = espidf, arduino
build_flags =
  ${env:atom_matrix_timing.build_flags}
  '-UBOOT_NAME -DBOOT_NAME=INSTRUMENT'
  -DJL_INSTRUMENTATION=1

[env:atom_matrix_ethernet_dev]
extends = env:atom_matrix_dev
lib_deps =
  ${env:atom_matrix_dev.lib_deps}
  arduino-libraries/Ethernet
build_flags =
  ${env:atom_matrix_dev.build_flags}
  '-DJAZZLIGHTS_ARDUINO_ETHERNET=1'
  '-UBOOT_NAME -DBOOT_NAME=ETHD'

# ATOM Matrix production configuration for staff.
[env:atom_matrix_staff]
extends = env:atom_matrix
build_flags =
  ${env:atom_matrix.build_flags}
  '-UJL_CONFIG -DJL_CONFIG=STAFF'
  '-UBOOT_NAME -DBOOT_NAME=STAFF'
  '-UMAX_MILLIWATTS -DMAX_MILLIWATTS=300'  # Significantly reduce power limit since this is 24V and 6 LEDs per pixel.
  -DBRIGHTER2=1

# ATOM Matrix production configuration for the captain hat.
[env:atom_matrix_captain_hat]
extends = env:atom_matrix
build_flags =
  ${env:atom_matrix.build_flags}
  '-UJL_CONFIG -DJL_CONFIG=CAPTAIN_HAT'
  '-UBOOT_NAME -DBOOT_NAME=CPT-HAT'

# ATOM Matrix production configuration for rope light.
[env:atom_matrix_ropelight]
extends = env:atom_matrix
build_flags =
  ${env:atom_matrix.build_flags}
  '-UJL_CONFIG -DJL_CONFIG=ROPELIGHT'
  '-UBOOT_NAME -DBOOT_NAME=ROPE'
  '-UMAX_MILLIWATTS'

# ATOM Matrix production configuration for hammer.
[env:atom_matrix_hammer]
extends = env:atom_matrix
build_flags =
  ${env:atom_matrix.build_flags}
  -DGLOW_ONLY=1
  '-UJL_CONFIG -DJL_CONFIG=HAMMER'
  '-UBOOT_NAME -DBOOT_NAME=HAMMER'

# ATOM Matrix production configuration for Fairy Wand.
[env:atom_matrix_wand]
extends = env:atom_matrix
build_flags =
  ${env:atom_matrix.build_flags}
  '-UJL_CONFIG -DJL_CONFIG=FAIRY_WAND'
  '-UBOOT_NAME -DBOOT_NAME=WAND'

[env:atom_lite]
extends = env:atom_matrix
build_flags =
  ${env:atom_matrix.build_flags}
  -DATOM_MATRIX_SCREEN=0
  -DBUTTONS_DISABLED=1
  '-UBOOT_NAME -DBOOT_NAME=LITE'
  '-UJL_CONTROLLER -DJL_CONTROLLER=ATOM_LITE'

# Main Core2AWS production build for gauntlet.
[env:core2aws]
platform = espressif32
board = esp32dev
monitor_filters = esp32_exception_decoder, time
upload_speed = 1500000
upload_port = hwgrep://^(/dev/cu\.usbserial-.{8}|/dev/ttyUSB.+|COM.+)$
monitor_port = ${this.upload_port}
# Increase available flash size by disabling Over The Air install option.
board_build.partitions = huge_app.csv
build_flags =
  ${env.build_flags}
  -DJL_CONFIG=GAUNTLET
  -DBOOT_NAME=GAUNTLET
  -DJL_CONTROLLER=CORE2AWS
lib_deps =
  ${env.lib_deps}
  m5stack/M5Core2

# Main Core2AWS development build for gauntlet.
# Uses lower LED brightness to not overload computer USB.
# Disables button lock.
[env:core2aws_dev]
extends = env:core2aws
build_flags =
  ${env:core2aws.build_flags}
  -DJL_DEV=1
  '-UMAX_MILLIWATTS -DMAX_MILLIWATTS=4200'  # Reduce power limit to 4W for host-connected development boards
  '-UBOOT_NAME -DBOOT_NAME=GNTLT-DEV'

# M5Stamp Pico
# This requires using the M5Stack USB ESP32 Downloader Kit
# https://docs.m5stack.com/en/accessory/esp32_downloader_kit
# You also need to install the drivers that match the driver chip (CP2104 or CH9102).
[env:m5stamp_pico]
extends = env:atom_matrix
upload_port = hwgrep://^/dev/cu\.wchusbserial\d{11}$
monitor_port = ${this.upload_port}
# Increase available flash size from 1.25MB to 3MB
# by disabling Over The Air install option.
board_build.partitions = atom_matrix_partition_table.csv
build_flags =
  ${env.build_flags}
  -DJL_CONFIG=VEST
  -DBOOT_NAME=PICO
  -DJL_CONTROLLER=M5STAMP_PICO

# M5Stamp C3U
[env:m5stamp_c3u]
extends = env:atom_matrix
board = adafruit_qtpy_esp32c3
upload_port = hwgrep://^/dev/cu\.(usb|)modem\d{3,7}$
monitor_port = ${this.upload_port}
# Increase available flash size from 1.25MB to 3MB
# by disabling Over The Air install option.
board_build.partitions = atom_matrix_partition_table.csv
build_flags =
  ${env.build_flags}
  -DATOM_MATRIX_SCREEN=0
  -DBUTTONS_DISABLED=1
  -DJL_CONFIG=VEST
  -DBOOT_NAME=C3U
  -DJL_CONTROLLER=M5STAMP_C3U

# Custom configs for multi-device testing.
[env:ds33_dev_a]
extends = env:atom_matrix_dev
upload_port = /dev/cu.usbserial-755264D6FA
monitor_port = ${this.upload_port}

[env:ds33_dev_b]
extends = env:atom_matrix_dev
upload_port = /dev/cu.usbserial-2D526B01AC
monitor_port = ${this.upload_port}

# Config for running on the host OS that runs PlatformIO.
[env:native]
platform = native
framework =
build_flags =
  ${env.build_flags}
  -std=c++20
  -DJL_CONFIG=NONE
  -DJL_CONTROLLER=NATIVE
lib_deps =
